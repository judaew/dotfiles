" vim: set foldmethod=marker foldmarker=[[[,]]] ft=vim:

" packages [[[

lua <<EOF
local fn = vim.fn
local install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'
if fn.empty(fn.glob(install_path)) > 0 then
  fn.system({'git', 'clone', '--depth', '1',
             'https://github.com/wbthomason/packer.nvim', install_path})
  vim.cmd 'packadd packer.nvim'
end
EOF

lua require('plugins')

if has('mac')
    set rtp+=/opt/local/share/fzf/vim
else
    set rtp+=/usr/bin/fzf
endif

" ]]]

" basic settings [[[

syntax on
filetype off
filetype plugin indent on

" colors and theme
set termguicolors
set background=dark
colorscheme molokai
let g:molokai_origin = 1
let g:rehash = 1

set encoding=utf-8
set expandtab
set tabstop=8
set shiftwidth=4
set autoread
set autoindent
set backspace=indent,eol,start
set incsearch
set hlsearch
set mouse=a

set title
set number
set showcmd
set noswapfile
set nobackup
set splitright
set splitbelow
set hidden
set noshowmatch
set noshowmode
set ignorecase
set smartcase
set completeopt=menu,menuone
set pumheight=10
set conceallevel=2
set laststatus=2
set noshowmode

" Do not select an option when will display completions
set completeopt-=preview
set completeopt+=menuone,noselect
" Better command-line completion
set wildmenu wildmode=full

" TODO: Make a function that can highlight tabs or trailling whitespace
"       by hotkey.
set list listchars=tab:\â”‚\ ,extends:>,precedes:<,nbsp:+

" Shut off completion messages
" If Vim beeps during completion
set shortmess+=c
set belloff+=ctrlg

" Speed up performans
set ttyfast
set lazyredraw
set updatetime=300

" Increase max memory to show syntax highlighting for large files
set maxmempattern=20000

if !isdirectory($HOME."/.cache/nvim")
    call mkdir($HOME."/.cache/nvim", "", 0770)
    call mkdir($HOME."/.cache/nvim/undo", "", 0700)
endif

" Enable persistent undo so that undo history persists across vim sessions
if has('persistent_undo')
  set undofile
  set undodir=~/.cache/nvim/undo
endif

" 80 chars/line
if exists('&colorcolumn')
  set colorcolumn=80
endif

" Disable modelines for vim is less 8.1-1364 or nvim is less 0.3.6 versions
" https://www.cvedetails.com/cve/CVE-2019-12735
if !has('patch1365') && !has('nvim-0.3.6')
  set nomodeline
endif

" ]]]

" mapping [[[

" remove newbie crutches (temporarily)
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" this comes first, because we have mappings that depend on leader
" with a map leader it's possible to do extra key combinations
let mapleader = ","

noremap <C-F> <C-D>
noremap <C-B> <C-U>

" disable C-a on tmux or on screen
if $TERM =~ 'screen'
  nnoremap <C-a> <nop>
  nnoremap <leader><C-a> <C-a>
endif

" Some useful quickfix shortcuts for quickfix
map <C-n> :cn<CR>
map <C-m> :cp<CR>
nmap <leader>a :cclose<CR>

" put quickfix window always to the bottom
augroup quickfix
  autocmd!
  autocmd FileType qf wincmd J
  autocmd FileType qf setlocal wrap
augroup END

" Close all but the current one
nmap <leader>o :only<CR>

" Better split switching
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" buffers
nnoremap ]b :bnext<cr>
nnoremap [b :bprev<cr>

" tabs
nnoremap ]t :tabn<cr>
nnoremap [t :tabp<cr>

" exit on j
imap jj <Esc>

" don't show stupid q: window
map q: :q

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

if has('nvim')
  " See https://bit.ly/2VZcKMb
  " Copy to clipboard
  vnoremap  <leader>y  "+y
  nnoremap  <leader>Y  "+yg_
  nnoremap  <leader>y  "+y
  nnoremap  <leader>yy  "+yy
  " Paste from clipboard
  nnoremap <leader>p "+p
  nnoremap <leader>P "+P
  vnoremap <leader>p "+p
  vnoremap <leader>P "+P
else
  " See http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
  set clipboard^=unnamed
  set clipboard^=unnamedplus
endif

" TODO: Make a function that recognizes the link, otherwise uses netrw for
"       this hotkey
" https://stackoverflow.com/a/63352904
nmap gx :!open <c-r><c-a>

" ]]]

" autocmd and autogroup [[[

au FileType vim         setlocal expandtab tabstop=2 shiftwidth=2
au FileType go          setlocal noexpandtab tabstop=4 shiftwidth=4
au FileType asciidoctor setlocal textwidth=79
au FileType yaml        setlocal expandtab tabstop=2 shiftwidth=2
au FileType Dockerfile  setlocal expandtab tabstop=2 shiftwidth=2

" spell
au FileType diff        setlocal spell spl=ru_yo,en_us
au FileType gitcommit   setlocal spell spl=ru_yo,en_us tw=72 colorcolumn=72

" Close documentation scratch buffer after complete
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" ]]]

" func and commands [[[

" Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" ]]]

" plugins conf [[[

lua require('plugins-conf-lua')

" ui [[[

" ---- itchyny/lightline.vim
function! LightlineReadonly()
  return &readonly && &filetype !~# '\v(help|man)' ? 'RO' : ''
endfunction

let g:lightline = {
      \ 'colorscheme': 'molokai',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified' ],
      \             [ 'gitbranch' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head',
      \   'readonly': 'LightlineReadonly',
      \ },
      \ 'component': {
      \   'lineinfo': '%l:%c %p%%'
      \ },
      \ }

" ---- t9md/vim-choosewin
nmap - <Plug>(choosewin)

" ]]]

" edit [[[

" ---- tpope/vim-commentary
map gc   <Plug>Commentary
nmap gcc <Plug>CommentaryLine

" ---- simnalamburt/vim-mundo
nnoremap U :MundoToggle<CR>

" ---- lyokha/vim-xkbswitch
let g:XkbSwitchEnabled = 1
let g:XkbSwitchLib = '/opt/local/lib/libInputSourceSwitcher.dylib'

" ]]]

" browsing [[[

" ---- lambdalisue/fern
" Open project (pwd)
nmap <leader>n :Fern . -drawer<CR>
" Open current working directory
nmap <leader>f :Fern . -reveal=% -drawer<CR>

" ---- justinmk/vim-gtfo
let g:gtfo#terminals = { 'mac': 'kitty' }

" ---- ratfactor/vviki
" VViki setup - relies on the default wiki root dir (~/wiki)
nnoremap <leader>ww :e ~/wiki/index.adoc<cr>

" ]]]

" dev [[[

" ---- hrsh7th/vim-vsnip
" Expand
imap <expr> <C-j>   vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
smap <expr> <C-j>   vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'

" Expand or jump
imap <expr> <C-l>   vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'

" ]]]

" lang [[[

" ---- habamax/vim-asciidoctor
let g:asciidoctor_executable = 'asciidoctorj'
let g:asciidoctor_pdf_executable = 'asciidoctorj -b pdf'

" ]]]

" ]]]
